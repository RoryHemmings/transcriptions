/**
 * Runs https server on instance of app from ../app.js
 */

const app = require('../app');
const debug = require('debug')('server:server');

const http = require('http');
// const https = require('https');
// const privateKey = fs.readFileSync('../srv/www/keys/server_key.pem', 'utf8');
// const certificate = fs.readFileSync('../srv/www/keys/server_certificate.crt', 'utf8');
// const options = {
//   key: privateKey,
//   cert: certificate
// }

const port = normalizePort(process.env.PORT || '80');
app.set('port', port);

// const server = http.createServer(options, app);
const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Make sure that port is valid
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Listen for HTTP error
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
