<!-- Url endpoint /transcriptions/uuid -->
<!-- Will show based off of transcription uuid -->

<head>
  <%- include('./partials/head'); %>
</head>

<body class="d-flex flex-column min-vh-100">
  <%- include('./partials/navbar') %>
  <main>
    <div id="transcription-content" class="container">
      <div id="transcription">
        <div class="row">
          <h1><%=transcription.title%></h1>
        </div>
        <div class="row">
          <a id="author" href="/user/<%=transcription.authorId%>"><%=transcription.author%></a>
          <% if (authenticated) { %>
          <button type="button" class="btn btn-primary" onclick="deleteTranscription()">Delete</button>
          <% } %>
        </div>
        <div class="row">
          <p class="text-muted">Date Created: <%=new Date(transcription.dateCreated).toLocaleString()%></p>
        </div>

        <div class="row">
          <% let tags = JSON.parse(transcription.tags); %>
          <% for (let i = 0; i < ((tags.length < 4) ? tags.length : 4); i++) { %>
          <p class="tag" onclick="reroute('/search/?term=tag=<%=tags[i]%>')"><%=tags[i]%></p>
          <% } %>
        </div>
        <div class="row">
          <p class="text-muted">Click on tags to see other transcriptions with the same tags</p>
        </div>

        <div class="row">
          <a href="/uploads/<%=transcription.filename%>" download>Download</a>
          <% if (transcription.mimetype == 'image/png' || transcription.mimetype == 'image/jpeg') { %>
          <img src="/uploads/<%=transcription.filename%>" alt="transcription" />
          <% } else if (transcription.mimetype == 'application/pdf') { %>
          <!-- <embed src="https://drive.google.com/viewerng/viewer?embedded=true&url=/static/uploads/<%=transcription.filename%>" 
          width="1000" height="600"/> -->
          <embed src="/uploads/<%=transcription.filename%>" width="1000" height="600" />
          <% } else { %>
          <p>This transcription file type does not support preview</p>
          <% } %>
        </div>
      </div>
      <div class="row" id="interactions">
        <div class="container">
          <div class="row" id="likes-dislikes">
            <% const likes = JSON.parse(transcription.likes); %>
            <% const dislikes = JSON.parse(transcription.dislikes); %>

            <% if (user != undefined) { %>

            <% if (!likes.includes(user.id)) { %>
            <button name="like-button" id="like-button" class="btn btn-primary" onclick="likePost()">Like</button>
            <% } else { %>
            <button name="like-button" id="like-button" class="btn btn-secondary" onclick="likePost()"
              disabled>Like</button>
            <% } %>

            <% if (!dislikes.includes(user.id)) { %>
            <button name="dislike-button" id="dislike-button" class="btn btn-danger"
              onclick="dislikePost()">Dislike</button>
            <% } else { %>
            <button name="dislike-button" id="dislike-button" class="btn btn-secondary" onclick="dislikePost()"
              disabled>Dislike</button>
            <% } %>

            <% } else {%>
            <button name="like-button" id="like-button" class="btn btn-primary" onclick="likePost()">Like</button>
            <button name="dislike-button" id="dislike-button" class="btn btn-danger"
              onclick="dislikePost()">Dislike</button>
            <% } %>

            <div class="container">
              <div class="row">
                <p class="text-justify" id="num-likes">Likes: <%=likes.length%></p>
              </div>
              <div class="row">
                <p class="text-justify" id="num-dislikes">Dislikes: <%=dislikes.length%></p>
              </div>
            </div>
          </div>
          <div class="row" id="new-comment">
            <form id="comment-form" action="/transcription/comment" method="POST">
              <div class="form-group">
                <label for="comment-input">Comment</label>
                <textarea type="text" rows="4" cols="50" class="form-control" name="comment-input" id="comment-input"
                  aria-describedby="helpId" placeholder="Comment"></textarea>
                <button type="submit" class="btn btn-primary">Submit</button>
              </div>
            </form>
          </div>
          <div class="container" id="comments">
            <div class="row">
              <h2>Comments: </h2>
            </div>
            <% const comments = JSON.parse(transcription.comments); %>
            <% for (let i = comments.length - 1; i > -1; i--) { %>
            <div class="row">
              <div class="comment">
                <hr>
                <a id="comment-username" class="text-justify font-weight-bold"
                  href="/user/<%=comments[i].userId%>"><%=comments[i].username%></a>
                <p id="comment-date" class="text-muted"><%=new Date(comments[i].dateCreated).toLocaleString()%></p>
                <p id="comment-text" class="text-justify"><%=comments[i].comment%></p>
                <% if (user) { %>
                <% if (comments[i].userId == user.id) { %>
                <!-- I know that casting the string is stupid, but its ejs' fault, not mine
                     you cant even access ejs variables unless they are inside strings. This happens all over my code -->
                <button class="btn btn-primary" onclick="deleteComment(Number('<%=i%>'))">Delete Comment</button>
                <% } %>
                <% } %>
              </div>
            </div>
            <% } %>
            <% if (comments.length == 0) { %>
            <p class="text-muted">No Comments Yet</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </main>

  <footer class="mt-auto">
    <%- include('./partials/footer'); %>
  </footer>

  <script>
    function likePost() {
      // Prevent from removing dislikes by liking
      if (transcriptionHasBeenRated()) {
        updateNumDislikes(-1);
      }

      updateNumLikes(1);

      setLikeButton(false);
      setDislikeButton(true);

      fetch('/transcription/like', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          transcriptionId: '<%= transcription.id %>'
        })
      }).then(res => {
        if (res.redirected) {
          window.location.replace(res.url);
        }
      });
    }

    function dislikePost() {
      // Prevent removing likes by disliking
      if (transcriptionHasBeenRated()) {
        updateNumLikes(-1);
      }

      updateNumDislikes(1);

      setLikeButton(true);
      setDislikeButton(false);

      fetch('/transcription/dislike', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          transcriptionId: '<%= transcription.id %>'
        })
      }).then(res => {
        if (res.redirected) {
          window.location.replace(res.url);
        }
      });
    }

    function transcriptionHasBeenRated() {
      const liked = document.getElementById('like-button').disabled;
      const disliked = document.getElementById('dislike-button').disabled;

      return liked || disliked;
    }

    function updateNumLikes(num) {
      let numLikes = Number(document.getElementById('num-likes').innerHTML.split(' ')[1]);
      document.getElementById('num-likes').innerHTML = 'Likes: ' + (numLikes + num);
    }

    function updateNumDislikes(num) {
      let numDislikes = Number(document.getElementById('num-dislikes').innerHTML.split(' ')[1]);
      document.getElementById('num-dislikes').innerHTML = 'Dislikes: ' + (numDislikes + num);
    }

    function setLikeButton(enable) {
      let likeButton = document.getElementById('like-button');
      if (enable) {
        likeButton.disabled = false;
        likeButton.setAttribute('class', 'btn btn-primary');
      } else {
        likeButton.disabled = true;
        likeButton.setAttribute('class', 'btn btn-secondary');
      }
    }

    function setDislikeButton(enable) {
      let dislikeButton = document.getElementById('dislike-button');
      if (enable) {
        dislikeButton.disabled = false;
        dislikeButton.setAttribute('class', 'btn btn-danger');
      } else {
        dislikeButton.disabled = true;
        dislikeButton.setAttribute('class', 'btn btn-secondary');
      }
    }

    function deleteTranscription() {
      let choice = confirm("Do you really want to delete this transcription and all interatctions associated with it. This is non-reversable.");
      if (!choice) {
        return;
      }

      fetch('/transcription/delete', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          transcriptionId: '<%=transcription.id%>',
        })
      })
        .then(res => res.json())
        .then(res => {
          if (res.status === 500 || res.status === 401) {
            alert('Something went wrong. Error code: ' + res.status);
          }

          if (res.status == 200 && res.success) {
            console.log("Transcription Deleted")
            reroute('/');
          }
        });
    }

    function deleteComment(index) {
      let choice = confirm("Do you really want to delete this comment. This is non-reversable.");
      if (!choice) {
        return;
      }

      fetch('/transcription/deleteComment', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          transcriptionId: '<%=transcription.id%>',
          commentIndex: index
        })
      })
        .then(res => res.json())
        .then(res => {
          if (res.status === 500 || res.status === 401) {
            alert('Something went wrong. Error code: ' + res.status);
          }

          if (res.status == 200 && res.success) {
            console.log("Transcription Deleted")
            // Reload page
            window.location.reload();
          }
        });
    }

    document.getElementById('comment-form').onsubmit = async (e) => {
      e.preventDefault();

      const comment = document.getElementById('comment-input').value;
      const transcriptionId = '<%= transcription.id %>';

      fetch('/transcription/comment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          commentInput: comment,
          transcriptionId: transcriptionId
        })
      })
        .then(async (res) => {
          if (res.redirected) {
            window.location.replace(res.url)
          }

          const data = await res.json();

          // Finish status, display comments and error check for wack inputs in comments 
          if (data.status == 201) {
            window.location.reload();
          }
        });
    }     
  </script>

</body>